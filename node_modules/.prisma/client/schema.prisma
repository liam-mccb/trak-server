// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------  ENUMS ----------
// ----------  ENUMS ----------
enum GameCode {
  POKEMON
  MAGIC
  YUGIOH
  SPORTS
  OTHER
}

enum ProductType {
  SEALED
  SINGLE_CARD
  ACCESSORY
}

enum GradingCompany {
  RAW
  PSA
  BGS
  CGC
  SGC
}

enum Currency {
  USD
  EUR
  GBP
  JPY
}

model Game {
  code     GameCode  @id
  name     String
  products Product[] @relation("GameProducts") // ‚Üê add relation name
}

model Product {
  id         Int      @id @default(autoincrement())
  externalId Int?
  gameCode   GameCode
  /// back-relation to Game
  game       Game     @relation("GameProducts", fields: [gameCode], references: [code])

  type           ProductType
  name           String
  setName        String?
  imageUrl       String?
  releaseDate    DateTime?
  variants       Variant[]
  priceSnapshots PriceSnapshot[]  @relation("productSnapshots")
  /// back-relation to CollectionItem
  collections    CollectionItem[]

  @@unique([gameCode, name])
  @@index([externalId])
  @@index([gameCode, type])
}

model Variant {
  id             Int              @id @default(autoincrement())
  productId      Int
  product        Product          @relation(fields: [productId], references: [id])
  gradeCompany   GradingCompany?
  gradeValue     Float?
  language       String?
  printing       String?
  priceSnapshots PriceSnapshot[]  @relation("variantSnapshots")
  /// back-relation to CollectionItem
  collections    CollectionItem[]

  @@unique([productId, gradeCompany, gradeValue])
}

model CollectionItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  variantId Int?
  quantity  Int      @default(1)
  costBasis Decimal? @db.Decimal(12, 2)
  addedAt   DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  variant Variant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
}

// ----------  TIME-SERIES ----------
model PriceSnapshot {
  id          Int      @id @default(autoincrement())
  productId   Int?
  variantId   Int? // NULL for sealed boxes
  currency    Currency @default(USD)
  marketPrice Decimal? @db.Decimal(12, 2)
  capturedAt  DateTime @default(now())

  product Product? @relation("productSnapshots", fields: [productId], references: [id])
  variant Variant? @relation("variantSnapshots", fields: [variantId], references: [id])

  @@index([productId, capturedAt])
  @@index([variantId, capturedAt])
}

// ----------  USERS + VAULT ----------
model User {
  id       Int              @id @default(autoincrement())
  authSub  String?          @unique
  email    String?          @unique
  username String?
  items    CollectionItem[]
}
